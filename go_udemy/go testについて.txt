
テストのやり方
    1.  testingパッケージを使う
    2.  ファイル名は_test.goが付くようにする
    3.  testingパッケージをimport
    4.  関数名はfunc TestXxx(t *testing.T)の形式にする

コマンド
    go test
    go test -v
    go test ./alib  alibはmainパッケージ配下にあるディレクトリ名
    go test ./...   パッケージ内全てのテストを実行
    go test -cover ./...    テストのカバー率を表示
                            すべての関数に関してテストができていればカバー率は100%となるn



テスト失敗した場合のエラーメッセージ

--- FAIL: TestIsOne (0.00s)
    main_test.go:24: 0 != 1
FAIL
exit status 1
FAIL    go_udemy/lesson54_test2 0.270s



このエラーメッセージは、Go言語のテストフレームワークである"go test"を実行した際に
テストが失敗したことを示しています。以下、エラーメッセージの各部分について説明します。

1.  --- FAIL: TestIsOne (0.00s)

    この行は、テストの詳細な結果を示すヘッダーの一部です。
    TestIsOne は失敗したテストケースの名前です。
    (0.00s) はテストが実行された時間を示しており、ここでは0秒かかりました。

2.  main_test.go:24: 0 != 1

    この行は、失敗したテストケースの詳細な情報を提供しています。
    main_test.go はテストが定義されているファイルの名前です。
    :24 はテストケースがファイル内の24行目で発生したことを示しています。
    0 != 1 はテストのアサーション（比較）に関する情報です。
    この場合、0と1を比較し、0と1が等しくないことを示しています。

3.  FAIL

    この行は、テストが失敗したことを示すキーワードです。
    テストが期待した結果を得られなかった場合、テストは「FAIL」とマークされます。

4.  exit status 1

    この行は、テストが終了した際の終了ステータスを示しています。
    ここでは1と表示されており、テストが失敗したことを示しています。
    正常に完了した場合は0が表示されるはずです。

5.  FAIL go_udemy/lesson54_test2 0.270s

    この行は、テストパッケージ全体の結果を示しています。
    go_udemy/lesson54_test2 はテストパッケージの名前です。
    0.270s はテスト全体の実行にかかった時間を示しています。