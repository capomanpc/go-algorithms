
インターフェース
    メソッドのシグニチャ(名前や引数や返り値の型)の集まりで定義される型の一種。メソッドの集まり。

シグニチャ
    関数やメソッドの名前や引数、返り値の型を表すもの
    例えば以下のような関数だと add(x, y int)int がこの関数のシグニチャとなる

    func add(x, y int)int{
       return x+y
    }

インターフェースの定義
    type Stringer interface {
        String() string
    }

    type インターフェース名 interface {
        メソッド名 返り値の型
    }

インターフェースの実装
    インターフェースで定義されたメソッドを構造体や関数が全て実装すること
    つまりインターフェースで定義されたメソッドのシグニチャと構造体で定義されたメソ
    ッドのシグニチャが同じであればその構造体がインターフェースを実装したことになる

暗黙的な実装
    Goではインターフェースで定義したメソッドと同じメソッドを構造体や関数で定義することで暗黙的に実装できる
    コンパイラがインタフェースを満たしているかどうか自動的に判断してくれる
    他の言語ではインターフェースで定義されている関数と同じ名前を付けても
    構造体のメソッドは暗黙的にインターフェースを実装してくれない

interface{}型
    どんな型でも格納できる特殊な型。型チェックや型変換などに使える。
