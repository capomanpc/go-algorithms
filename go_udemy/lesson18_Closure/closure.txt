Go言語において、以下の条件を満たす関数がクロージャと呼ばれる。

1.関数内で定義された無名関数（匿名関数）であること。
    無名関数じゃなくて普通の関数でもOK
    無名関数にすることでクロージャを簡潔に表現できてシンプルな構文にすることができる
    またシンプルに表現できるのでリソースの節約にも有用


2.その無名関数が外部の変数を参照していること。
    言葉通り


3.内部関数(無名関数)が外部関数から返されていること。
    外部関数の戻り値(返り値)としてスコープ内で定義された無名関数が使用されていること


クロージャを使うメリット

1.変数のキャプチャ    
クロージャは、自身が定義されたスコープ内の変数をキャプチャ（保持）することができます。
これにより、クロージャ内から外部の変数にアクセスすることが可能になります。
変数のキャプチャによって、関連するデータをクロージャ内で利用することができます。

2.状態の保持
クロージャは、変数のキャプチャによって状態を保持することができます。
例えば、関数を呼び出すたびに内部の状態が初期化されるのではなく、
クロージャを使用することで状態を保持し、前回の呼び出しの結果に基づいて次の呼び出しを行うことができます。これは、反復処理やイベント処理など、状態を管理する必要がある場合に特に有用です。

3.コードのカプセル化
クロージャは、関数内に関数を定義することで、コードをよりカプセル化することができます。
クロージャは外部からアクセスできないため、内部の処理や実装の詳細を隠すことができます。
これにより、プログラムのモジュール性や保守性が向上します。

4.高度な関数型プログラミング
クロージャは、関数型プログラミングのパラダイムをサポートする重要な要素です。
関数を第一級オブジェクトとして扱い、関数を引数として受け取ったり、
関数を返り値として返したりすることができます。
これによって、高階関数やカリー化などのテクニックを使用して、柔軟なコードを記述することができます。

5/クロージャの柔軟性
クロージャは、動的に生成された関数として使用することができます。
関数を生成し、必要なタイミングで呼び出すことができます。
この柔軟性によって、動的なプログラミングやイベント駆動型の処理を行う際に便利です。

これらのメリットによって、クロージャはプログラミングの表現力と柔軟性を向上させ、
コードの再利用性と保守性を高める役割を果たします。





